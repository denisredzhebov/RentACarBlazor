@page "/vehicles/create/"
@using System.Text.Json
@using System.Text

@inject HttpClient Http
@inject NavigationManager NavManager


<h3 class="card-title">Create New Vehicles</h3>
<hr/>
<br/>

<EditForm Model="@vehicle" OnValidSubmit="CreateVehicle">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
     @*<div class="form-group">
        <label>Image (Optional): </label>
        <div>
            <InputFile OnChange="HandleFileSelection">
                <p class="text-danger">@UploadFileWarning</p>
             </InputFile>
        </div>
    </div>*@

    <div class="form-group">
        <label>Make: </label>
        <div>
            <InputSelect @bind-Value="vehicle.MakeId" class="form-control">
                <option value="">-- Select Make --</option>
                @if(Makes != null)
                {
                    foreach (var make in Makes)
                    {
                        <option value="@make.Id">@make.Name</option>
                    }
                }
             </InputSelect>
            <ValidationMessage For="@(() => vehicle.MakeId)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Model: </label>
        <div>
            <InputSelect @bind-Value="vehicle.ModelId" class="form-control">
                <option value="">-- Select Model --</option>
                @if(Models != null)
                {
                    foreach (var model in Models)
                    {
                        <option value="@model.Id">@model.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.ModelId)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Colour: </label>
        <div>
            <InputSelect @bind-Value="vehicle.ColourId" class="form-control">
                <option value="">-- Select Colour --</option>
                @if(Colours != null)
                {
                    foreach (var colour in Colours)
                    {
                        <option value="@colour.Id">@colour.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.ColourId)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Year: </label>
        <div>
           <InputNumber @bind-Value="vehicle.Year" class="form-control"/>
           <ValidationMessage For="@(() => vehicle.Year)"/>
        </div>
    </div>
    <div class="form-group">
        <label>License Plate Number: </label>
        <div>
           <InputText @bind-Value="vehicle.LicensePlateNumber" class="form-control"/>
           <ValidationMessage For="@(() => vehicle.LicensePlateNumber)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Vehicle Identification Number: </label>
        <div>
           <InputText @bind-Value="vehicle.Vin" class="form-control"/>
           <ValidationMessage For="@(() => vehicle.Vin)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Daily Rate: </label>
        <div>
           <InputNumber @bind-Value="vehicle.RentalRate" class="form-control"/>
           <ValidationMessage For="@(() => vehicle.RentalRate)"/>
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Vehicle
    </button>
</EditForm>

@code {
    Vehicle vehicle = new Vehicle();

    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;
    string UploadFileWarning;

    protected async override Task OnInitializedAsync()
    {
        Makes = await Http.GetFromJsonAsync<List<Make>>($"api/makes");
        Models = await Http.GetFromJsonAsync<List<Model>>("api/models");
        Colours = await Http.GetFromJsonAsync<List<Colour>>("api/colours");
    }
    private async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if(file != null)
        {
            var extension = System.IO.Path.GetExtension(file.Name);
            if (extension.ToLower().Contains("jpg")
            || extension.ToLower().Contains("png")
            || extension.ToLower().Contains("jpeg")) 
            {
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                vehicle.ImageName = $"{picId}{extension}";
                vehicle.Image = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(vehicle.Image);
                UploadFileWarning = string.Empty;
            }
            else
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png | *.jpeg)";
            }
        }
    }

    private async Task CreateVehicle()
    {
       
        await Http.PostAsJsonAsync("api/vehicles", vehicle);
        NavManager.NavigateTo("/vehicles/");
     
    }
}
    
